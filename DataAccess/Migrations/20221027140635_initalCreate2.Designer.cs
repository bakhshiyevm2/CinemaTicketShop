// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221027140635_initalCreate2")]
    partial class initalCreate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entites.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataAccess.Entites.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(856),
                            CreateUserId = 1,
                            ImgPath = "~/img/pulp_fict.jpg",
                            Name = "Movie",
                            Note = "Description",
                            Price = 5.0
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(873),
                            CreateUserId = 1,
                            ImgPath = "~/img/pulp_fict.jpg",
                            Name = "Test",
                            Note = "Description",
                            Price = 15.0
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(886),
                            CreateUserId = 1,
                            ImgPath = "~/img/pulp_fict.jpg",
                            Name = "123123",
                            Note = "Description",
                            Price = 55.0
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(898),
                            CreateUserId = 1,
                            ImgPath = "~/img/pulp_fict.jpg",
                            Name = "Testmurad",
                            Note = "Description",
                            Price = 25.0
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(912),
                            CreateUserId = 1,
                            ImgPath = "~/img/pulp_fict.jpg",
                            Name = "MuradMovie",
                            Note = "Description",
                            Price = 51.0
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(933),
                            CreateUserId = 1,
                            ImgPath = "~/img/pulp_fict.jpg",
                            Name = "Test 2",
                            Note = "Description",
                            Price = 6.0
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 924, DateTimeKind.Local).AddTicks(9041),
                            CreateUserId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 924, DateTimeKind.Local).AddTicks(9105),
                            CreateUserId = 1,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 10, 27, 18, 6, 34, 925, DateTimeKind.Local).AddTicks(800),
                            CreateUserId = 1,
                            PasswordHash = "�'��Ξ���T�����fKg��[��Ѫ������",
                            RoleId = 1,
                            Salt = "qfOGQGQyHzGFhA==",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.Cart", b =>
                {
                    b.HasOne("DataAccess.Entites.Product", "Product")
                        .WithMany("Cart")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entites.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entites.User", b =>
                {
                    b.HasOne("DataAccess.Entites.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entites.Product", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DataAccess.Entites.User", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
